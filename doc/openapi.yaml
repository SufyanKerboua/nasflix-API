openapi: 3.0.0
info:
  description: API permettant de communiquer avec une bibliotheque video
  version: 1.0.0
  title: Nasflix-API

servers:
  - url: https://localhost:8080
    description: Developpement

tags:
  - name: users
    description: Gestion des utilisateurs
  - name: movies
    description: Movies

paths:
  /users:
    get:
      tags:
        - users
      summary: Permet d'identifier un utilisateur
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
      responses:
        '200':
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserConnexion'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /movies:
    get:
      tags:
        - movies
      summary: Récupère la liste de tout les films
      parameters:
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessFetchMovieList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Récupère les informations concernant un produit d'un utilisateur
      parameters:
        - $ref: '#/components/parameters/token'
        - $ref: '#/components/parameters/movieId'
      responses:
        '200':
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessProductFetch'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'

components:
  schemas:
    SuccessUserConnexion:
      description: Success connection
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy'
        user:
          type: object
          example:
            username: 'Pseudo User'

    SuccessProductFetch:
      description: Success request
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy'
        product:
          type: object
          example:
            bar_code: '900296251812'
            product_name: 'Noodle'
            brands: 'Best noodle ever'
            ingredients_text: 'Noodle: rice, water. seasoning packet: peanut, sugar'
            image_url: 'https://images.openfoodfacts.org/images400.jpg'

    SuccessFetchMovieList:
      description: Success request
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy'
        movies:
          type: array
          example:
            [
              {
                title: 'Avenger',
                poster: 'https://images.openfoodfacts.org/images.jpg',
                desc: 'Crunch bar',
                year: '2012',
                duration: '2h23',
                actors: ['Crunch bar', 'tkt'],
              },
            ]

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Unauthorized:
      description: Unauthorized
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - unauthorized
        message:
          example: 'Your request is unauthorized to call this resource'

    BadRequest:
      description: Bad Request
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - bad_request
        message:
          example: 'The payload do not respect the contract'

    InternalError:
      description: Internal Error
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - internal_error
        message:
          example: 'Please contact the administrator...'

    NotFound:
      description: Resource not found
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        code:
          type: string
          enum:
            - not_found
        message:
          example: 'Resource not found'

    token:
      description: User token.
      type: string

  parameters:
    username:
      name: username
      in: query
      description: User's name
      required: true
      schema:
        type: string
    password:
      name: password
      in: query
      description: User's password
      required: true
      schema:
        type: string
        format: password
    token:
      name: token
      in: header
      description: JWT Token
      required: true
      schema:
        type: string
    movieId:
      name: movieId
      in: path
      description: Bar code of the product to fetch
      required: true
      schema:
        type: integer
